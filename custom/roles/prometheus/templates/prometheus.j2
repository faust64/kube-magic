---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
  namespace: {{ prometheus_ns }}
data:
  prometheus.yml: |
    global:
      scrape_interval: {{ prometheus_scrape_interval }}
      evaluation_interval: {{ prometheus_eval_interval }}
      external_labels:
        monitor: opsperator-monitor

    rule_files:
    - /etc/prometheus/rules.d/*.yaml

    scrape_configs:
    - job_name: prometheus
      static_configs:
      - labels:
          kubernetes_cluster: {{ prometheus_local_cluster }}
          kubernetes_namespace: {{ prometheus_ns }}
          kubernetes_service_name: prometheus
          kubernetes_pod_name: prometheus
        targets: ['localhost:9090']

    - job_name: cluster
      kubernetes_sd_configs:
      - role: endpoints
        selectors:
        - role: endpoints
          label: k8s-cluster=scrape-me
      relabel_configs:
      - action: replace
        replacement: {{ prometheus_local_cluster }}
        source_labels: [__meta_kubernetes_endpoint_address_target_kind]
        target_label: kubernetes_cluster
      - action: replace
        source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      scheme: http

    - job_name: cadvisor
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      metrics_path: /metrics/cadvisor
      relabel_configs:
      - action: replace
        replacement: {{ prometheus_local_cluster }}
        source_labels: [__meta_kubernetes_endpoint_address_target_kind]
        target_label: kubernetes_cluster
      - action: replace
        source_labels: [__meta_kubernetes_node_name]
        target_label: kubernetes_node_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true

    - job_name: kubelet
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: replace
        replacement: {{ prometheus_local_cluster }}
        source_labels: [__meta_kubernetes_endpoint_address_target_kind]
        target_label: kubernetes_cluster
      - action: replace
        source_labels: [__meta_kubernetes_node_name]
        target_label: kubernetes_node_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true

    - job_name: nodes
      kubernetes_sd_configs:
      - role: endpoints
        selectors:
        - label: k8s-nodes=scrape-me
          role: endpoints
      relabel_configs:
      - action: replace
        replacement: {{ prometheus_local_cluster }}
        source_labels: [__meta_kubernetes_endpoint_address_target_kind]
        target_label: kubernetes_cluster
      - action: replace
        source_labels: [__meta_kubernetes_pod_node_name]
        target_label: kubernetes_node_name
      scheme: http

    - job_name: apps
      kubernetes_sd_configs:
      - role: endpoints
        selectors:
        - label: k8s-app=scrape-me
          role: endpoints
      relabel_configs:
      - action: replace
        replacement: {{ prometheus_local_cluster }}
        source_labels: [__meta_kubernetes_endpoint_address_target_kind]
        target_label: kubernetes_cluster
      - action: replace
        regex: (.+)
        source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        target_label: __metrics_path__
      - action: keep
        regex: '(exporter-[0-9]*|tcp-9113)'
        source_labels: [__meta_kubernetes_endpoint_port_name]
      - action: replace
        source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - action: replace
        source_labels: [__meta_kubernetes_pod_node_name]
        target_label: kubernetes_node_name
      - action: replace
        source_labels: [__meta_kubernetes_pod_name]
        target_label: kubernetes_pod_name
      - action: replace
        source_labels: [__meta_kubernetes_pod_label_name]
        target_label: kubernetes_service_name
      scheme: http

    alerting:
      alert_relabel_configs:
      - action: replace
        regex: (.+)
        replacement: prometheus
        source_labels: [scrape_by]
        target_label: scrape_by
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - alertmanager.{{ prometheus_ns }}.svc.{{ cluster_domain }}:9093
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: {{ prometheus_ns }}
spec:
  podManagementPolicy: OrderedReady
  replicas: {{ prometheus_replicas }}
  selector:
    matchLabels:
      name: prometheus
  serviceName: prometheus
  template:
    metadata:
      labels:
        name: prometheus
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values: [ prometheus ]
            topologyKey: kubernetes.io/hostname
      initContainers:
      - args:
        -c
        - |
             sed "/external_labels:.*/ascrape_by: $REPLICA/" /etc/prometheus.yml.tpl | \
                 sed "s|^scrape_by:|    scrape_by:|" >/etc/prometheus/prometheus.yml;
        command: [ /bin/sh ]
        env:
        - name: REPLICA
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: docker.io/prom/prometheus:{{ prometheus_tag }}
        imagePullPolicy: IfNotPresent
        name: configure
        volumeMounts:
        - mountPath: /etc/prometheus
          name: temp
          subPath: prometheus
        - mountPath: /etc/prometheus.yml.tpl
          name: config
          subPath: prometheus.yml
      containers:
      - args:
        - --config.file=/etc/prometheus/prometheus.yml
{% if do_thanos | default(False) %}
        - --storage.tsdb.max-block-duration=2h
        - --storage.tsdb.min-block-duration=2h
{% endif %}
        - --storage.tsdb.path=/prometheus
        - --storage.tsdb.retention.time={{ prometheus_retention }}
        - --web.console.libraries=/usr/share/prometheus/console_libraries
        - --web.console.templates=/usr/share/prometheus/consoles
{% if do_thanos | default(False) %}
        - --web.enable-admin-api
        - --web.enable-lifecycle
{% endif %}
        image: docker.io/prom/prometheus:{{ prometheus_tag }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 20
        name: prometheus
        ports:
        - containerPort: 9090
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "{{ prometheus_cpu_limit }}"
            memory: "{{ prometheus_memory_limit }}"
          requests:
            cpu: "{{ prometheus_cpu_request }}"
            memory: "{{ prometheus_memory_request }}"
        volumeMounts:
        - mountPath: /etc/prometheus
          name: temp
          subPath: prometheus
        - mountPath: /prometheus
          name: data
        - mountPath: /etc/prometheus/rules.d
          name: rules
{% if do_thanos | default(False) %}
      - args:
        - sidecar
        - --grpc-address=0.0.0.0:10901
        - --http-address=0.0.0.0:10902
{% if do_debugs | default(False) %}
        - --log.level=debug
{% else %}
        - --log.level=info
{% endif %}
        - --objstore.config=$(OBJSTORE_CONFIG)
        - --prometheus.ready_timeout=10m
        - --prometheus.url=http://127.0.0.1:9090
        - --tsdb.path=/prometheus
        env:
        - name: OBJSTORE_CONFIG
          valueFrom:
            secretKeyRef:
              key: thanos.yaml
              name: thanos-store
        image: quay.io/thanos/thanos:{{ thanos_tag }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 30
          httpGet:
            path: /-/healthy
            port: 10902
          periodSeconds: 30
        name: thanos
        ports:
        - containerPort: 10901
          name: grpc
        - containerPort: 10902
          name: http
        readinessProbe:
          failureThreshold: 20
          httpGet:
            path: /-/ready
            port: 10902
          periodSeconds: 5
        resources:
          limits:
            cpu: "{{ thanos_sidecar_cpu_limit }}"
            memory: "{{ thanos_sidecar_memory_limit }}"
          requests:
            cpu: "{{ thanos_sidecar_cpu_request }}"
            memory: "{{ thanos_sidecar_memory_request }}"
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /prometheus
          name: data
{% endif %}
{% if k8s_resource_nodes_selectors | length > 0 %}
      nodeSelectors:
{% for sel in k8s_resource_nodes_selectors %}
        {{ sel.split('=')[0] }}: "{{ sel.split('=')[1] if (sel.split('=') | length > 1) else '' }}"
{% endfor %}
{% endif %}
      securityContext:
{% if rwo_needs_fsgroup | default(False) %}
        fsGroup: {{ rwo_needs_fsgroup }}
{% endif %}
        runAsUser: 1001
      serviceAccount: prometheus
      serviceAccountName: prometheus
      terminationGracePeriodSeconds: 120
      volumes:
      - configMap:
          name: prometheus
        name: config
      - name: rules
        projected:
          sources:
{% for rule_file in prometheus_rules %}
{% if (do_thanos | default(False) and do_thanos_rule | default(False) and rule_file is match('thanos')) or not (do_thanos_rule | default(False)) %}
          - configMap:
              items:
              - key: {{ rule_file }}.yaml
                path: {{ rule_file }}.yaml
              name: prometheus-rule-{{ rule_file | lower | regex_replace('[\\.-_ ]', '') }}
{% endif %}
{% endfor %}
      - emptyDir: {}
        name: temp
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: "{{ prometheus_data_capacity }}"
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: {{ prometheus_ns }}
spec:
  ports:
  - name: http
    port: 9090
  selector:
    name: prometheus
{% if do_thanos | default(False) %}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: scrape-me
  name: prometheus-thanos
  namespace: {{ prometheus_ns }}
spec:
  ports:
  - name: grpc
    port: 10901
  - name: exporter
    port: 10902
  selector:
    name: prometheus
{% endif %}
