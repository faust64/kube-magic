---
apiVersion: v1
kind: Secret
metadata:
  name: alertmanager
  namespace: {{ prometheus_ns }}
stringData:
  alertmanager.yml: |
    global:
      resolve_timeout: 5m
{% if smtp_relay | default(False) %}
      smtp_smarthost: {{ smtp_relay }}:{{ smtp_port | default(25) }}
      smtp_from: prometheus@{{ smtp_domain | default('example.com') }}
      smtp_require_tls: {{ 'False' if ((smtp_port | default(25) | int) != 465) lse 'True' }}
{% endif %}
    route:
      group_by:
      - job
      group_interval: 5m
      group_wait: 30s
      receiver: default
      repeat_interval: 12h
      routes:
      - match:
          alertname: DeadMansSwitch
        receiver: deadmansswitch
        repeat_interval: 5m
      - match:
          severity: warning
        receiver: default
        repeat_interval: 6h
      - match:
          severity: critical
        receiver: default
        repeat_interval: 3h
    receivers:
    - name: deadmansswitch
    - name: default
{% if notify_slack_address | default(False) %}
      slack_configs:
      - api_url: {{ notify_slack_address }}
        channel: #{{ notify_slack_channel }}
        send_resolved: {{ notify_send_resolved }}
{% endif %}
{% if notify_email_address | default(False) %}
      email_configs:
      - from: prometheus@{{ prometheus_fqdn }}
        send_resolved: {{ notify_send_resolved }}
        to: {{ notify_email_address }}
{% endif %}
{% if notify_http_address | default(False) %}
      webhook_configs:
      - url: {{ notify_http_address }}
        send_resolved: {{ notify_send_resolved }}
{% endif %}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: alertmanager
  namespace: {{ prometheus_ns }}
spec:
  podManagementPolicy: OrderedReady
  replicas: {{ alertmanager_replicas }}
  selector:
    matchLabels:
      name: alertmanager
  serviceName: alertmanager
  template:
    metadata:
      labels:
        name: alertmanager
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values: [ alertmanager ]
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - --config.file=/etc/config/alertmanager.yml
        - --cluster.listen-address=$(POD_IP):6783
{% for n in range(alertmanager_replicas | int) %}
        - --cluster.peer=alertmanager-{{ loop.index0 }}.alertmanager.{{ prometheus_ns }}.svc.{{ cluster_domain }}:6783
{% endfor %}
{% if do_debugs | default(False) %}
        - --log.level=debug
{% endif %}
        - --storage.path=/data
        - --web.listen-address=:9093
        - --web.route-prefix=/
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: docker.io/prom/alertmanager:{{ alertmanager_tag }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 9093
          initialDelaySeconds: 30
          timeoutSeconds: 20
        name: alertmanager
        ports:
        - containerPort: 6783
          name: mesh
        - containerPort: 9093
          name: http
        readinessProbe:
          httpGet:
            path: /#/status
            port: 9093
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
          limits:
            cpu: "{{ alertmanager_cpu_limit }}"
            memory: "{{ alertmanager_memory_limit }}"
          requests:
            cpu: "{{ alertmanager_cpu_request }}"
            memory: "{{ alertmanager_memory_request }}"
        volumeMounts:
        - mountPath: /etc/config/alertmanager.yml
          name: config
          subPath: alertmanager.yml
        - mountPath: /data
          name: data
{% if k8s_resource_nodes_selectors | length > 0 %}
      nodeSelectors:
{% for sel in k8s_resource_nodes_selectors %}
        {{ sel.split('=')[0] }}: "{{ sel.split('=')[1] if (sel.split('=') | length > 1) else '' }}"
{% endfor %}
{% endif %}
      securityContext:
{% if rwo_needs_fsgroup | default(False) %}
        fsGroup: {{ rwo_needs_fsgroup }}
{% endif %}
        runAsUser: 1001
      volumes:
      - name: config
        secret:
          secretName: alertmanager
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: "{{ alertmanager_data_capacity }}"
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: {{ prometheus_ns }}
spec:
  ports:
  - name: http
    port: 9093
  selector:
    name: alertmanager
