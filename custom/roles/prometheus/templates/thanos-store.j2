apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: thanos-store
  namespace: {{ prometheus_ns }}
spec:
  podManagementPolicy: OrderedReady
  replicas: {{ thanos_store_replicas }}
  selector:
    matchLabels:
      name: thanos-store
  serviceName: thanos-store
  template:
    metadata:
      labels:
        name: thanos-store
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values: [ thanos-store ]
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - store
        - --data-dir=/var/thanos/store
        - --grpc-address=0.0.0.0:10901
        - --http-address=0.0.0.0:10902
{% if do_debugs | default(False) %}
        - --log.level=debug
{% else %}
        - --log.level=info
{% endif %}
        - --objstore.config=$(OBJSTORE_CONFIG)
        env:
        - name: OBJSTORE_CONFIG
          valueFrom:
            secretKeyRef:
              key: thanos.yaml
              name: thanos-store
        image: quay.io/thanos/thanos:{{ thanos_tag }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /-/healthy
            port: 10902
          periodSeconds: 30
        name: thanos
        ports:
        - containerPort: 10901
          name: grpc
        - containerPort: 10902
          name: http
        readinessProbe:
          failureThreshold: 20
          httpGet:
            path: /-/ready
            port: 10902
          periodSeconds: 5
        resources:
          limits:
            cpu: "{{ thanos_store_cpu_limit }}"
            memory: "{{ thanos_store_memory_limit }}"
          requests:
            cpu: "{{ thanos_store_cpu_request }}"
            memory: "{{ thanos_store_memory_request }}"
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/thanos/store
          name: data
{% if k8s_resource_nodes_selectors | length > 0 %}
      nodeSelectors:
{% for sel in k8s_resource_nodes_selectors %}
        {{ sel.split('=')[0] }}: "{{ sel.split('=')[1] if (sel.split('=') | length > 1) else '' }}"
{% endfor %}
{% endif %}
      securityContext:
{% if rwo_needs_fsgroup | default(False) %}
        fsGroup: {{ rwo_needs_fsgroup }}
{% endif %}
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: "{{ thanos_store_data_capacity }}"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: scrape-me
  name: thanos-store
  namespace: {{ prometheus_ns }}
spec:
  ports:
  - name: grpc
    port: 10901
  - name: exporter
    port: 10902
  selector:
    name: thanos-store
